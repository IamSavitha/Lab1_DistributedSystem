{"ast":null,"code":"// src/app/store.js\nimport { configureStore } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // localStorage\nimport { combineReducers } from 'redux';\nimport travelerReducer from '../features/traveler/travelerSlice';\nimport ownerReducer from '../features/owner/OwnerSlice';\n\n// Redux Persist 配置\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['traveler', 'owner'] // 只持久化 traveler 和 owner 状态\n};\n\n// 合并所有 reducers\nconst rootReducer = combineReducers({\n  traveler: travelerReducer,\n  owner: ownerReducer\n});\n\n// 创建持久化的 reducer\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// 配置 store\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      // 忽略 redux-persist 的 action\n      ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE']\n    }\n  })\n});\n\n// 创建 persistor\nexport const persistor = persistStore(store);","map":{"version":3,"names":["configureStore","persistStore","persistReducer","storage","combineReducers","travelerReducer","ownerReducer","persistConfig","key","whitelist","rootReducer","traveler","owner","persistedReducer","store","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor"],"sources":["D:/236/lab1/Lab1_DistributedSystem/frontend/src/app/store.js"],"sourcesContent":["// src/app/store.js\nimport { configureStore } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // localStorage\nimport { combineReducers } from 'redux';\nimport travelerReducer from '../features/traveler/travelerSlice';\nimport ownerReducer from '../features/owner/OwnerSlice';\n\n// Redux Persist 配置\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['traveler', 'owner'], // 只持久化 traveler 和 owner 状态\n};\n\n// 合并所有 reducers\nconst rootReducer = combineReducers({\n  traveler: travelerReducer,\n  owner: ownerReducer,\n});\n\n// 创建持久化的 reducer\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// 配置 store\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        // 忽略 redux-persist 的 action\n        ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE'],\n      },\n    }),\n});\n\n// 创建 persistor\nexport const persistor = persistStore(store);\n"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,YAAY,EAAEC,cAAc,QAAQ,eAAe;AAC5D,OAAOC,OAAO,MAAM,2BAA2B,CAAC,CAAC;AACjD,SAASC,eAAe,QAAQ,OAAO;AACvC,OAAOC,eAAe,MAAM,oCAAoC;AAChE,OAAOC,YAAY,MAAM,8BAA8B;;AAEvD;AACA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXL,OAAO;EACPM,SAAS,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC,CAAE;AACpC,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGN,eAAe,CAAC;EAClCO,QAAQ,EAAEN,eAAe;EACzBO,KAAK,EAAEN;AACT,CAAC,CAAC;;AAEF;AACA,MAAMO,gBAAgB,GAAGX,cAAc,CAACK,aAAa,EAAEG,WAAW,CAAC;;AAEnE;AACA,OAAO,MAAMI,KAAK,GAAGd,cAAc,CAAC;EAClCe,OAAO,EAAEF,gBAAgB;EACzBG,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjB;MACAC,cAAc,EAAE,CAAC,iBAAiB,EAAE,mBAAmB;IACzD;EACF,CAAC;AACL,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,SAAS,GAAGnB,YAAY,CAACa,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}